import asyncio
import logging
import json
import uuid
from datetime import datetime
from typing import Dict, List

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, PollAnswer, InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.types import CallbackQuery
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
from os import getenv

load_dotenv()
API_TOKEN = getenv("TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - \
                    %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot = Bot(
    token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PollCreationState(StatesGroup):
    waiting_for_poll_name = State()
    waiting_for_start_day = State()
    waiting_for_start_time = State()
    waiting_for_end_day = State()
    waiting_for_end_time = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
active_polls: Dict[str, Dict] = {}  # poll_id -> poll_data
poll_settings: Dict[str, List[Dict]] = {}  # chat_id -> list of settings
user_sessions: Dict[int, Dict] = {}  # user_id -> session_data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_days_markup():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_0")],
            [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_1")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="day_2")],
            [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="day_3")],
            [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_4")],
            [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="day_5")],
            [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="day_6")]
        ]
    )


# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(chat_id, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        status_str = str(member.status).lower()

        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status_str}")

        admin_statuses = ['administrator', 'creator', 'owner', 'admin']
        is_admin = any(
            admin_status in status_str for admin_status in admin_statuses
        )

        logger.info(f"–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {is_admin}")
        return is_admin

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False


async def check_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    if message.chat.type not in ['group', 'supergroup']:
        return True

    if not await is_admin(message.chat.id, message.from_user.id):
        await message.answer(
            "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã!"
        )
        return False
    return True


def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    global poll_settings
    try:
        with open('poll_data.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        poll_settings = {
            chat_id: settings for chat_id,
            settings in data.items() if settings
        }
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: \
                    {len(poll_settings)} —á–∞—Ç–æ–≤ —Å –æ–ø—Ä–æ—Å–∞–º–∏")

    except FileNotFoundError:
        logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        poll_settings = {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        poll_settings = {}


def save_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
    with open('poll_data.json', 'w', encoding='utf-8') as f:
        json.dump(poll_settings, f, ensure_ascii=False, indent=2)
    logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")


def day_name_to_number(day_name: str) -> int:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –≤ –Ω–æ–º–µ—Ä"""
    days = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2, "—á–µ—Ç–≤–µ—Ä–≥": 3,
        "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
    }
    return days.get(day_name.lower(), 1)


def number_to_day_name(number: int) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
    days = [
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    ]
    return days[number] if 0 <= number < 7 else "–í—Ç–æ—Ä–Ω–∏–∫"


async def create_poll(chat_id: str, settings: Dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    try:
        poll_message = await bot.send_poll(
            chat_id=chat_id,
            question=settings['poll_name'],
            options=["‚úÖ –î–∞", "‚ùå –ù–µ—Ç", "‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º"],
            is_anonymous=False,
            allows_multiple_answers=False,
            type='regular'
        )

        poll_id = str(uuid.uuid4())
        active_polls[poll_id] = {
            'chat_id': chat_id,
            'poll_id': poll_message.poll.id,
            'message_id': poll_message.message_id,
            'user_ids': {'‚úÖ –î–∞': [], '‚ùå –ù–µ—Ç': [], '‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º': []},
            'start_time': datetime.now(),
            'settings': settings,
            'original_poll_id': poll_message.poll.id
        }

        logger.info(
            f"–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: ID={poll_id}, chat={chat_id}, \
            name={settings['poll_name']}"
        )
        return poll_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return None


async def close_poll(poll_id: str):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–æ—Å–∞"""
    if poll_id not in active_polls:
        logger.warning(f"–û–ø—Ä–æ—Å {poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞—Ö")
        return

    try:
        poll_data = active_polls[poll_id]
        chat_id = poll_data['chat_id']

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å - –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º
        await bot.stop_poll(chat_id, poll_data['message_id'])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        keyboard = InlineKeyboardMarkup(
          inline_keyboard=[
            [InlineKeyboardButton(
             text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
             url=f"https://t.me/c/{str(chat_id)[4:]}/{poll_data['message_id']}"
             )]
            ]
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        yes_count = len(poll_data['user_ids']['‚úÖ –î–∞'])
        question_count = len(poll_data['user_ids']['‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message = f"""
üèÜ –û–ø—Ä–æ—Å "{poll_data['settings']['poll_name']}" –∑–∞–≤–µ—Ä—à–µ–Ω!

üìä –ò—Ç–æ–≥–æ:
‚úÖ –ü—Ä–∏–¥—É—Ç: {yes_count} —á–µ–ª.
‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º: {question_count} —á–µ–ª.

–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üëá
"""

        await bot.send_message(
            chat_id=chat_id,
            text=result_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ {chat_id}")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
        del active_polls[poll_id]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞ {poll_id}: {e}")


def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤"""
    scheduler.remove_all_jobs()

    for chat_id, settings_list in poll_settings.items():
        for i, settings in enumerate(settings_list):
            # –î–∂–æ–± –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
            start_day = settings['start_day']
            start_hour = settings['start_time']['hour']
            start_minute = settings['start_time']['minute']

            scheduler.add_job(
                create_poll,
                CronTrigger(
                    day_of_week=start_day,
                    hour=start_hour,
                    minute=start_minute,
                    timezone='Europe/Moscow'
                ),
                args=[chat_id, settings],
                id=f'poll_start_{chat_id}_{i}'
            )

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–æ—Å–∞
            end_day = settings['end_day']
            end_hour = settings['end_time']['hour']
            end_minute = settings['end_time']['minute']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            scheduler.add_job(
                close_poll_by_settings,
                CronTrigger(
                    day_of_week=end_day,
                    hour=end_hour,
                    minute=end_minute,
                    timezone='Europe/Moscow'
                ),
                args=[chat_id, i],
                id=f'poll_end_{chat_id}_{i}'
            )

    logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è \
                {sum(len(v) for v in poll_settings.values())} –æ–ø—Ä–æ—Å–æ–≤")


async def close_poll_by_settings(chat_id: str, settings_index: int):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–æ—Å–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        for poll_id, poll_data in list(active_polls.items()):
            if (
                poll_data['chat_id'] == chat_id and
                poll_data['settings'] == poll_settings[chat_id][settings_index]
               ):
                await close_poll(poll_id)
                break
        else:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: \
                           chat_id={chat_id}, index={settings_index}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {e}")


@dp.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å"""
    for poll_id, poll_data in list(active_polls.items()):
        if poll_data['original_poll_id'] == poll_answer.poll_id:
            try:
                user_id = poll_answer.user.id
                option_chosen = poll_answer.option_ids[0]
                option_text = [
                    "‚úÖ –î–∞",
                    "‚ùå –ù–µ—Ç",
                    "‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º"
                ][option_chosen]

                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                for option in poll_data['user_ids']:
                    if user_id in poll_data['user_ids'][option]:
                        poll_data['user_ids'][option].remove(user_id)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
                poll_data['user_ids'][option_text].append(user_id)

                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –æ–ø—Ä–æ—Å–µ \
                            {poll_id} –≤—ã–±—Ä–∞–ª: {option_text}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            break


@dp.message(Command("start"))
async def handle_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    if not await check_admin(message):
        return

    if message.chat.type in ['group', 'supergroup']:
        await message.answer(
            '''–ë–æ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω!\n
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_poll –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'''
        )
    else:
        await message.answer(
            '''–ë–æ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω!\n
–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É.'''
        )


@dp.message(Command("set_poll"))
async def handle_set_poll(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–ø—Ä–æ—Å–∞"""
    if not await check_admin(message):
        return

    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    chat_id = str(message.chat.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    await state.update_data(chat_id=chat_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:", reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(PollCreationState.waiting_for_poll_name)


@dp.message(Command("active_polls"))
async def handle_active_polls(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    if not active_polls:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤")
        return

    response = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:\n\n"
    for poll_id, poll_data in active_polls.items():
        response += (f"ID: {poll_id}\n"
                     f"–ß–∞—Ç: {poll_data['chat_id']}\n"
                     f"–ù–∞–∑–≤–∞–Ω–∏–µ: {poll_data['settings']['poll_name']}\n"
                     f"–ì–æ–ª–æ—Å–æ–≤: ‚úÖ{len(poll_data['user_ids']['‚úÖ –î–∞'])} "
                     f"‚ùì{len(poll_data['user_ids']['‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º'])} "
                     f"‚ùå{len(poll_data['user_ids']['‚ùå –ù–µ—Ç'])}\n\n")

    await message.answer(response)


@dp.message(PollCreationState.waiting_for_poll_name)
async def process_poll_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
    if not await check_admin(message):
        return

    await state.update_data(poll_name=message.text)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_days_markup()
    )
    await state.set_state(PollCreationState.waiting_for_start_day)


@dp.callback_query(F.data.startswith("day_"))
async def handle_day_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
    day_number = int(callback.data.split("_")[1])
    day_name = number_to_day_name(day_number)

    current_state = await state.get_state()

    if current_state == PollCreationState.waiting_for_start_day:
        await state.update_data(start_day=day_number)
        await callback.message.answer(f"""–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞: {day_name}\n
–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12:00):""")
        await state.set_state(PollCreationState.waiting_for_start_time)

    elif current_state == PollCreationState.waiting_for_end_day:
        await state.update_data(end_day=day_number)
        await callback.message.answer(f"""–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è: {day_name}\n
–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00):""")
        await state.set_state(PollCreationState.waiting_for_end_time)

    await callback.answer()


@dp.message(PollCreationState.waiting_for_start_day)
async def process_start_day(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è –Ω–∞—á–∞–ª–∞"""
    if not await check_admin(message):
        return

    if message.text.lower() not in [
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    ]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_days_markup()
        )
        return

    await state.update_data(start_day=day_name_to_number(message.text.lower()))

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12:00):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(PollCreationState.waiting_for_start_time)


@dp.message(PollCreationState.waiting_for_start_time)
async def process_start_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    if not await check_admin(message):
        return

    try:
        time_parts = message.text.split(':')
        hour = int(time_parts[0])
        minute = int(time_parts[1])

        if not (0 <= hour < 24 and 0 <= minute < 60):
            raise ValueError

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        start_time = {'hour': hour, 'minute': minute}
        await state.update_data(start_time=start_time)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞:",
            reply_markup=get_days_markup()
        )
        await state.set_state(PollCreationState.waiting_for_end_day)

    except (ValueError, IndexError):
        await message.answer(
            """–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n
–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12:00):""")


@dp.message(PollCreationState.waiting_for_end_day)
async def process_end_day(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    if not await check_admin(message):
        return

    if message.text.lower() not in [
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    ]:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_days_markup()
        )
        return

    await state.update_data(end_day=day_name_to_number(message.text.lower()))

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(PollCreationState.waiting_for_end_time)


@dp.message(PollCreationState.waiting_for_end_time)
async def process_end_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not await check_admin(message):
        return

    try:
        time_parts = message.text.split(':')
        hour = int(time_parts[0])
        minute = int(time_parts[1])

        if not (0 <= hour < 24 and 0 <= minute < 60):
            raise ValueError

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        chat_id = data['chat_id']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_time = {'hour': hour, 'minute': minute}

        settings = {
            'poll_name': data['poll_name'],
            'start_day': data['start_day'],
            'start_time': data['start_time'],
            'end_day': data['end_day'],
            'end_time': end_time
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if chat_id not in poll_settings:
            poll_settings[chat_id] = []
        poll_settings[chat_id].append(settings)

        save_data()

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        setup_scheduler()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        start_day_name = number_to_day_name(settings['start_day'])
        end_day_name = number_to_day_name(settings['end_day'])
        start_time_str = "{:02d}:{:02d}".format(
                settings['start_time']['hour'],
                settings['start_time']['minute']
        )
        end_time_str = "{:02d}:{:02d}".format(
                settings['end_time']['hour'],
                settings['end_time']['minute']
        )
        await message.answer(
            f"‚úÖ –ù–æ–≤—ã–π –æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {settings['poll_name']}\n"
            f"‚è∞ –ù–∞—á–∞–ª–æ: {start_day_name} –≤ {start_time_str}\n"
            f"‚èπÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_day_name} –≤ {end_time_str}\n\n"
            f"–í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ: {len(poll_settings[chat_id])}"
        )

        await state.clear()

    except (ValueError, IndexError):
        await message.answer(
            """–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n
–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00):""")


@dp.message(Command("poll_list"))
async def handle_poll_list(message: Message):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"""
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /poll_list –¥–ª—è —á–∞—Ç–∞ {message.chat.id}")  # Debug

    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    chat_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
    if chat_id not in poll_settings or not poll_settings[chat_id]:
        await message.answer(
            """–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.\n
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_poll –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è."""
        )
        return

    response = "üìã –°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ:\n\n"
    for i, settings in enumerate(poll_settings[chat_id], 1):
        start_day_name = number_to_day_name(settings['start_day'])
        end_day_name = number_to_day_name(settings['end_day'])
        start_time_str = "{:02d}:{:02d}".format(
                settings['start_time']['hour'],
                settings['start_time']['minute']
        )
        end_time_str = "{:02d}:{:02d}".format(
                settings['end_time']['hour'],
                settings['end_time']['minute']
        )
        response += (f"{i}. {settings['poll_name']}\n"
                     f"   –ù–∞—á–∞–ª–æ: {start_day_name} –≤ {start_time_str}\n"
                     f"   –ö–æ–Ω–µ—Ü: {end_day_name} –≤ {end_time_str}\n\n")

    response += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_poll –Ω–æ–º–µ—Ä"
    await message.answer(response)


@dp.message(Command("delete_poll"))
async def handle_delete_poll(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    if not await check_admin(message):
        return

    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    chat_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
    if chat_id not in poll_settings or not poll_settings[chat_id]:
        await message.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()

    if len(args) == 1:
        # –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤
        response = "üìã –°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        for i, settings in enumerate(poll_settings[chat_id], 1):
            start_day_name = number_to_day_name(settings['start_day'])
            end_day_name = number_to_day_name(settings['end_day'])
            start_time_str = "{:02d}:{:02d}".format(
                    settings['start_time']['hour'],
                    settings['start_time']['minute']
            )
            end_time_str = "{:02d}:{:02d}".format(
                    settings['end_time']['hour'],
                    settings['end_time']['minute']
            )
            response += (f"{i}. {settings['poll_name']}\n"
                         f"   –ù–∞—á–∞–ª–æ: {start_day_name} –≤ {start_time_str}\n"
                         f"   –ö–æ–Ω–µ—Ü: {end_day_name} –≤ {end_time_str}\n\n")

        response += "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_poll –Ω–æ–º–µ—Ä"
        await message.answer(response)

    elif len(args) == 2:
        # –ö–æ–º–∞–Ω–¥–∞ —Å –Ω–æ–º–µ—Ä–æ–º –æ–ø—Ä–æ—Å–∞
        try:
            poll_number = int(args[1])
            if 1 <= poll_number <= len(poll_settings[chat_id]):
                # –£–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å
                deleted_poll = poll_settings[chat_id].pop(poll_number - 1)

                # –ï—Å–ª–∏ –æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–∞—Ç–∞
                if not poll_settings[chat_id]:
                    del poll_settings[chat_id]

                save_data()
                setup_scheduler()

                await message.answer(
                    f"‚úÖ –û–ø—Ä–æ—Å '{deleted_poll['poll_name']}' —É–¥–∞–ª–µ–Ω!"
                )
            else:
                await message.answer(
                    """–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–ø—Ä–æ—Å–∞.\n
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /poll_list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞."""
                )

        except ValueError:
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_poll –Ω–æ–º–µ—Ä (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ)"
            )

    else:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_poll –∏–ª–∏ /delete_poll –Ω–æ–º–µ—Ä"
        )


@dp.message(Command("delete_all_polls"))
async def handle_delete_all_polls(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—Ä–æ—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"""
    if not await check_admin(message):
        return

    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    chat_id = str(message.chat.id)

    if chat_id in poll_settings and poll_settings[chat_id]:
        count = len(poll_settings[chat_id])
        del poll_settings[chat_id]
        save_data()
        setup_scheduler()

        await message.answer(f"‚úÖ –í—Å–µ {count} –æ–ø—Ä–æ—Å–æ–≤ —É–¥–∞–ª–µ–Ω—ã!")
    else:
        await message.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


@dp.message(Command("debug_polls"))
async def handle_debug_polls(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ä–æ—Å–∞—Ö"""
    if not await check_admin(message):
        return

    chat_id = str(message.chat.id)

    debug_info = f"""
üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
–ß–∞—Ç ID: {chat_id}
–í poll_settings: {chat_id in poll_settings}
"""

    if chat_id in poll_settings:
        debug_info += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–æ—Å–æ–≤: {len(poll_settings[chat_id])}\n"
        for i, settings in enumerate(poll_settings[chat_id]):
            debug_info += f"–û–ø—Ä–æ—Å {i+1}: {settings['poll_name']}\n"
    else:
        debug_info += "–ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"

    debug_info += f"\n–í—Å–µ —á–∞—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏: {list(poll_settings.keys())}"

    await message.answer(debug_info)


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    load_data()
    scheduler.start()
    setup_scheduler()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    save_data()
    scheduler.shutdown()
    await bot.session.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == '__main__':
    asyncio.run(main())
