import asyncio
import logging
from datetime import datetime
from typing import Dict

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, PollAnswer, InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
from os import getenv

load_dotenv()
API_TOKEN = getenv("TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s \
                    - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot = Bot(
    token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞
poll_data: Dict[str, Dict] = {}
current_poll_id = None
group_chat_id = None
poll_ms_id = None


async def get_group_chat_id():
    """–ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    global group_chat_id
    try:
        updates = await bot.get_updates()
        for update in updates:
            if update.message and update.message.chat.type in [
                'group', 'supergroup'
            ]:
                group_chat_id = update.message.chat.id
                logger.info(f"–ù–∞–π–¥–µ–Ω ID –≥—Ä—É–ø–ø—ã: {group_chat_id}")
                return group_chat_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –≥—Ä—É–ø–ø—ã: {e}")
    return None


async def create_poll():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    global current_poll_id, group_chat_id, poll_ms_id

    try:
        if not group_chat_id:
            group_chat_id = await get_group_chat_id()
            if not group_chat_id:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã")
                return

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ: {group_chat_id}")

        poll_message = await bot.send_poll(
            chat_id=group_chat_id,
            question="üéØ –¢—Ä–µ–Ω—è –ö–æ—Ä–∞–ª 20:00 —Å—Ä–µ–¥–∞",
            options=["‚úÖ –ò–¥—É", "‚ùå –ù–µ —Å–º–æ–≥—É", "‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º"],
            is_anonymous=False,
            allows_multiple_answers=False,
            type='regular'
        )

        current_poll_id = poll_message.poll.id
        poll_ms_id = poll_message.message_id
        poll_data[current_poll_id] = {
            'message_id': poll_message.message_id,
            'user_ids': {'‚úÖ –î–∞': [], '‚ùå –ù–µ—Ç': [], '‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º': []},
            'start_time': datetime.now()
        }

        logger.info(f"–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω: {current_poll_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")


async def close_poll_and_publish_results():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    global current_poll_id, group_chat_id, poll_ms_id

    if not current_poll_id:
        logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
        return

    try:
        if not group_chat_id:
            logger.error("ID –≥—Ä—É–ø–ø—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    url=f"https://t.me/c/{str(group_chat_id)[4:]}/{poll_ms_id}"
                )]
            ]
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        yes_count = len(poll_data[current_poll_id]['user_ids']['‚úÖ –î–∞'])
        question_count = len(
            poll_data[current_poll_id]['user_ids']['‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º']
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message = f"""
–ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞:

‚úÖ –ü—Ä–∏–¥—É—Ç: {yes_count} —á–µ–ª.

‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º: {question_count} —á–µ–ª.

–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üëá
"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await bot.send_message(
            chat_id=group_chat_id,
            text=result_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Å –∫–Ω–æ–ø–∫–æ–π")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        current_poll_id = None
        poll_ms_id = None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")


@dp.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å"""
    global current_poll_id, group_chat_id

    if current_poll_id and poll_answer.poll_id == current_poll_id:
        try:
            user_id = poll_answer.user.id

            option_chosen = poll_answer.option_ids[0]
            option_text = ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç", "‚ùì –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º"][option_chosen]

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            for option in poll_data[current_poll_id]['user_ids']:
                if user_id in poll_data[current_poll_id]['user_ids'][option]:
                    poll_data[
                        current_poll_id]['user_ids'][option].remove(user_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É
            poll_data[current_poll_id]['user_ids'][option_text].append(user_id)

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id} –≤—ã–±—Ä–∞–ª: {option_text}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    global group_chat_id

    if message.chat.type in ['group', 'supergroup']:
        group_chat_id = message.chat.id
        logger.info(f"ID –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {group_chat_id}")
        await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!")
    else:
        await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É.")


@dp.message(Command("set_chat_id"))
async def cmd_set_chat_id(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —á–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é"""
    global group_chat_id
    if message.from_user.id == message.chat.id:  # —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        try:
            chat_id = int(message.text.split()[1])
            group_chat_id = chat_id
            await message.answer(f"ID –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {group_chat_id}")
        except (IndexError, ValueError):
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_chat_id <ID_—á–∞—Ç–∞>")


@dp.message(Command("get_chat_id"))
async def cmd_get_chat_id(message: Message):
    """–ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}")


@dp.message(Command("manual_poll"))
async def cmd_manual_poll(message: Message):
    """–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    global group_chat_id

    if message.chat.type in ['group', 'supergroup']:
        group_chat_id = message.chat.id
        await create_poll()
    elif message.from_user.id == message.chat.id:  # –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if group_chat_id:
            await create_poll()
            await message.answer("–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!")
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ID \
                                 –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥–æ–π /set_chat_id")


@dp.message(Command("manual_results"))
async def cmd_manual_results(message: Message):
    """–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–æ—Å–∞"""
    if message.from_user.id == message.chat.id:  # —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        await close_poll_and_publish_results()
        await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")


@dp.message(Command("debug"))
async def cmd_debug(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    debug_info = f"""
üìä –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: {group_chat_id}
‚Ä¢ –¢–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å: {current_poll_id}
‚Ä¢ ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞: {poll_ms_id}
‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞: {bool(poll_data)}
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler.running}
"""
    await message.answer(debug_info)


def schedule_polls():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤"""
    # –ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –≤ 12:00
    scheduler.add_job(
        create_poll,
        CronTrigger(
            day_of_week='tue',
            hour=12,
            minute=0,
            timezone='Europe/Moscow'
        ),
        id='weekly_poll'
    )

    # –ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É –≤ 18:00
    scheduler.add_job(
        close_poll_and_publish_results,
        CronTrigger(
            day_of_week='wed',
            hour=18,
            minute=0,
            timezone='Europe/Moscow'
        ),
        id='weekly_poll_results'
    )


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    scheduler.start()
    schedule_polls()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    scheduler.shutdown()
    await bot.session.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == '__main__':
    asyncio.run(main())
